{"version":3,"sources":["logo.svg","AddContact.js","SortContacts.js","ShowContacts.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","AddContact","onClick","this","props","addContactProp","Component","SortContacts","Fragment","sortName","sortPop","ShowContacts","showTheContacts","showContacts","map","eachContact","i","key","src","pictureUrl","name","popularity","deleteContactProp","App","state","contacts","splice","allContacts","deleteContact","index","contactList","setState","addContact","randomIndex","Math","floor","random","length","randomContact","newContactList","push","allContactList","sortByName","sort","compareNames","sortByPop","comparePops","className","a","b","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3e459139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass AddContact extends Component {\n    \n    render() {\n        return (\n            <button onClick={this.props.addContactProp}>Add Random Contact</button>\n        );\n    }\n}\n\nexport default AddContact;","import React, { Component } from 'react';\n\nclass SortContacts extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <button onClick={this.props.sortName}>Sort By Name</button>\n                <button onClick={this.props.sortPop}>Sort By Pop</button>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SortContacts;","import React, { Component } from 'react';\n\nclass ShowContacts extends Component {\n\n  showTheContacts = () => {\n    let listOfContacts = this.props.showContacts.map((eachContact, i)=>{ //looping\n      return ( \n            <li key={i}>\n              <img src={eachContact.pictureUrl}/>\n              <p>{eachContact.name}</p>\n              <p>{eachContact.popularity}</p>\n              <button onClick={()=>this.props.deleteContactProp(i)}>Delete {i}</button>\n            </li>\n      )\n    })\n    return listOfContacts\n  }\n\n    render() {\n        return (\n            <React.Fragment>\n                  {this.showTheContacts()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ShowContacts;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddContact from './AddContact'\nimport SortContacts from './SortContacts'\nimport ShowContacts from './ShowContacts'\nimport contacts from './contacts'\n\n\n\nclass App extends Component {\n\n  state = {\n    showContacts : contacts.splice(0,5),\n    allContacts  : contacts\n  }\n\n  \n\n  deleteContact = (index) => {\n    let contactList = [...this.state.showContacts]\n    contactList.splice(index,1)\n    this.setState({\n      showContacts: contactList\n    })\n  }\n\n  addContact = () => {\n    let randomIndex = Math.floor(Math.random()*this.state.allContacts.length)\n    let randomContact = this.state.allContacts[randomIndex]\n    let newContactList = [...this.state.showContacts] //make copy of current list \n    newContactList.push(randomContact) //add new random contact \n\n    let allContactList = [...this.state.allContacts]\n    allContactList.splice(randomIndex, 1)\n\n    this.setState({\n      showContacts: newContactList,\n      allContacts : allContactList\n    })\n  }\n\n  sortByName = () => {\n\n    this.setState({\n      showContacts: [...this.state.showContacts].sort( compareNames ) //sort takes a function of how it wants to be sorted\n    })\n  }\n\n  sortByPop = () => {\n\n    this.setState({\n      showContacts: [...this.state.showContacts].sort( comparePops ) //sort takes a function of how it wants to be sorted\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <SortContacts sortName={this.sortByName} sortPop={this.sortByPop}/>       \n        <AddContact addContactProp={this.addContact} />\n        <ShowContacts showContacts={this.state.showContacts} deleteContactProp={this.deleteContact}/>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\nfunction compareNames( a, b ) {\n  if ( a.name < b.name ){\n    return -1;\n  }\n  if ( a.name > b.name ){\n    return 1;\n  }\n  return 0;\n}\n\n\nfunction comparePops( a, b ) {\n  if ( a.popularity < b.popularity ){\n    return 1;\n  }\n  if ( a.popularity > b.popularity ){\n    return -1;\n  }\n  return 0;\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}